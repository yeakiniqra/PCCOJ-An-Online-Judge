# Generated by Django 5.1.3 on 2025-03-14 17:46

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ProblemTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=255)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('description', models.TextField()),
                ('rules', models.TextField(blank=True, null=True)),
                ('start_time', models.DateTimeField(db_index=True)),
                ('end_time', models.DateTimeField(db_index=True)),
                ('is_public', models.BooleanField(default=True)),
                ('is_rated', models.BooleanField(default=True)),
                ('max_participants', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_contests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ContestParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.contest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='contest',
            name='participants',
            field=models.ManyToManyField(related_name='contests', through='api.ContestParticipation', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(db_index=True, default=0)),
                ('problems_solved', models.IntegerField(default=0)),
                ('last_submission_time', models.DateTimeField(auto_now=True)),
                ('penalty', models.IntegerField(default=0)),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard', to='api.contest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-score', 'penalty', 'last_submission_time'],
            },
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=255)),
                ('slug', models.SlugField(max_length=255)),
                ('statement', models.TextField()),
                ('input_format', models.TextField()),
                ('output_format', models.TextField()),
                ('constraints', models.TextField()),
                ('sample_input', models.TextField()),
                ('sample_output', models.TextField()),
                ('explanation', models.TextField(blank=True, null=True)),
                ('time_limit', models.FloatField(default=1.0)),
                ('memory_limit', models.IntegerField(default=256)),
                ('difficulty', models.CharField(choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard'), ('Very Hard', 'Very Hard')], db_index=True, max_length=50)),
                ('points', models.IntegerField(default=100)),
                ('is_visible', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problems', to='api.contest')),
                ('tags', models.ManyToManyField(related_name='problems', to='api.problemtag')),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.TextField()),
                ('language', models.CharField(choices=[('Python', 'Python'), ('C++', 'C++'), ('Java', 'Java'), ('JavaScript', 'JavaScript'), ('Go', 'Go'), ('Rust', 'Rust')], max_length=50)),
                ('submitted_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Accepted', 'Accepted'), ('Wrong Answer', 'Wrong Answer'), ('Runtime Error', 'Runtime Error'), ('Time Limit Exceeded', 'Time Limit Exceeded'), ('Compilation Error', 'Compilation Error'), ('Memory Limit Exceeded', 'Memory Limit Exceeded')], db_index=True, default='Pending', max_length=50)),
                ('execution_time', models.FloatField(blank=True, null=True)),
                ('memory_used', models.FloatField(blank=True, null=True)),
                ('score', models.IntegerField(default=0)),
                ('compiler_output', models.TextField(blank=True, null=True)),
                ('testcases_passed', models.IntegerField(default=0)),
                ('testcases_total', models.IntegerField(default=0)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='api.contest')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='api.problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Testcase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input', models.TextField()),
                ('output', models.TextField()),
                ('is_sample', models.BooleanField(default=False)),
                ('points', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='testcases', to='api.problem')),
            ],
        ),
        migrations.CreateModel(
            name='SubmissionTestcase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Accepted', 'Accepted'), ('Wrong Answer', 'Wrong Answer'), ('Runtime Error', 'Runtime Error'), ('Time Limit Exceeded', 'Time Limit Exceeded'), ('Memory Limit Exceeded', 'Memory Limit Exceeded')], default='Accepted', max_length=50)),
                ('execution_time', models.FloatField(blank=True, null=True)),
                ('memory_used', models.FloatField(blank=True, null=True)),
                ('output', models.TextField(blank=True, null=True)),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='testcases', to='api.submission')),
                ('testcase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='api.testcase')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mobile', models.CharField(blank=True, max_length=15, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('rating', models.IntegerField(default=1500)),
                ('total_submissions', models.IntegerField(default=0)),
                ('total_solved', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_global', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='announcements', to=settings.AUTH_USER_MODEL)),
                ('contest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='announcements', to='api.contest')),
            ],
            options={
                'indexes': [models.Index(fields=['contest', 'created_at'], name='api_announc_contest_79cdd2_idx'), models.Index(fields=['is_global'], name='api_announc_is_glob_bd75f4_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='contestparticipation',
            index=models.Index(fields=['user', 'contest'], name='api_contest_user_id_f70c06_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='contestparticipation',
            unique_together={('user', 'contest')},
        ),
        migrations.AddIndex(
            model_name='contest',
            index=models.Index(fields=['start_time', 'end_time'], name='api_contest_start_t_848a65_idx'),
        ),
        migrations.AddIndex(
            model_name='contest',
            index=models.Index(fields=['is_public'], name='api_contest_is_publ_216945_idx'),
        ),
        migrations.AddIndex(
            model_name='leaderboard',
            index=models.Index(fields=['contest', 'score', 'last_submission_time'], name='api_leaderb_contest_6ded49_idx'),
        ),
        migrations.AddIndex(
            model_name='leaderboard',
            index=models.Index(fields=['rank'], name='api_leaderb_rank_e18388_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='leaderboard',
            unique_together={('contest', 'user')},
        ),
        migrations.AddIndex(
            model_name='problem',
            index=models.Index(fields=['difficulty', 'points'], name='api_problem_difficu_deacea_idx'),
        ),
        migrations.AddIndex(
            model_name='problem',
            index=models.Index(fields=['is_visible'], name='api_problem_is_visi_b97aa4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='problem',
            unique_together={('contest', 'slug')},
        ),
        migrations.AddIndex(
            model_name='submission',
            index=models.Index(fields=['user', 'problem'], name='api_submiss_user_id_89861f_idx'),
        ),
        migrations.AddIndex(
            model_name='submission',
            index=models.Index(fields=['contest', 'user'], name='api_submiss_contest_a9ad29_idx'),
        ),
        migrations.AddIndex(
            model_name='submission',
            index=models.Index(fields=['status', 'submitted_at'], name='api_submiss_status_e76d42_idx'),
        ),
        migrations.AddIndex(
            model_name='testcase',
            index=models.Index(fields=['problem', 'is_sample'], name='api_testcas_problem_03b2d1_idx'),
        ),
        migrations.AddIndex(
            model_name='submissiontestcase',
            index=models.Index(fields=['submission', 'status'], name='api_submiss_submiss_590bc7_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['rating'], name='api_userpro_rating_7f453e_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['total_solved'], name='api_userpro_total_s_f4d180_idx'),
        ),
    ]
